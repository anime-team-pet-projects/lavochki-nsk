definitions:
  apperror.AppError:
    properties:
      details:
        items:
          type: integer
        type: array
      message:
        type: string
    type: object
  domain.Bench:
    properties:
      id:
        type: string
      images:
        items:
          type: string
        type: array
      is_active:
        type: boolean
      lat:
        type: number
      lng:
        type: number
      owner:
        type: string
    type: object
  domain.BenchesList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/domain.Bench'
        type: array
    type: object
  domain.Comment:
    properties:
      author_id:
        type: string
      bench_id:
        type: string
      content:
        type: string
      id:
        type: string
      nested_comments:
        items:
          $ref: '#/definitions/domain.Comment'
        type: array
      parent_id:
        type: string
    type: object
  domain.CommentReport:
    properties:
      ID:
        type: string
      cause:
        type: string
      comment_id:
        type: string
      is_active:
        type: boolean
      user_id:
        type: string
    type: object
  domain.Tag:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  domain.User:
    properties:
      id:
        type: string
      role:
        type: string
      telegram_id:
        type: integer
      username:
        type: string
    type: object
  dto.AuthorizationBot:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  dto.CreateBench:
    properties:
      images:
        items:
          items:
            type: integer
          type: array
        type: array
      lat:
        example: "0"
        type: string
      lng:
        example: "0"
        type: string
    type: object
  dto.CreateBenchViaTelegram:
    properties:
      images:
        items:
          items:
            type: integer
          type: array
        type: array
      lat:
        type: number
      lng:
        type: number
      user_telegram_id:
        type: integer
    type: object
  dto.CreateComment:
    properties:
      bench_id:
        type: string
      content:
        type: string
      parent_id:
        type: string
    type: object
  dto.CreateReportComment:
    properties:
      cause:
        type: string
      comment_id:
        type: string
      id:
        type: string
    type: object
  dto.CreateTag:
    properties:
      title:
        type: string
    type: object
  dto.CreateUser:
    properties:
      auth_date:
        type: integer
      first_name:
        type: string
      hash:
        type: string
      id:
        type: integer
      last_name:
        type: string
      photo_url:
        type: string
      username:
        type: string
    type: object
  dto.DecisionBench:
    properties:
      decision:
        type: boolean
      id:
        type: string
      message:
        type: string
    type: object
  dto.RefreshToken:
    properties:
      token:
        type: string
    type: object
  dto.UpdateBench:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  dto.UpdateComment:
    properties:
      content:
        type: string
      id:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/benches:
    get:
      description: Get a list of benches with filtering and pagination
      parameters:
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: sort order
        in: query
        name: sort_order
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: per page
        in: query
        name: per_page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.BenchesList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: List benches with filtering and pagination
      tags:
      - Benches
    post:
      parameters:
      - description: bench data
        in: body
        name: Bench
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBench'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - multipart/form-data
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "418":
          description: I'm a teapot
      summary: Create bench
      tags:
      - Benches
  /api/v1/benches/{id}:
    delete:
      description: Delete bench by ID
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bench ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "418":
          description: I'm a teapot
      summary: Delete bench
      tags:
      - Benches
    get:
      description: Get detail active bench
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Bench'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Detail bench
      tags:
      - Benches
    patch:
      parameters:
      - description: bench data
        in: body
        name: Bench
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBench'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bench ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "418":
          description: I'm a teapot
      summary: Update bench
      tags:
      - Benches
  /api/v1/benches/moderation:
    get:
      description: Get list moderation benches
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: sort order
        in: query
        name: sort_order
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: pre page
        in: query
        name: per_page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Bench'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Moderation list benches
      tags:
      - Benches
    post:
      description: Accept or reject a bench
      parameters:
      - description: decision bench data
        in: body
        name: Decision
        required: true
        schema:
          $ref: '#/definitions/dto.DecisionBench'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Decision bench
      tags:
      - Benches
  /api/v1/benches/telegram:
    post:
      parameters:
      - description: bench data
        in: body
        name: CreateBenchViaTelegram
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBenchViaTelegram'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Create bench via telegram
      tags:
      - Benches
  /api/v1/bot/auth:
    post:
      parameters:
      - description: bot info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthorizationBot'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
      summary: Authorization bot
      tags:
      - Bot
  /api/v1/bot/refresh:
    post:
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: token info
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Bot refresh token
      tags:
      - Bot
  /api/v1/comments:
    patch:
      parameters:
      - description: comment data
        in: body
        name: UpdateComment
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateComment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Update comment
      tags:
      - Comments
    post:
      parameters:
      - description: comment data
        in: body
        name: CreateComment
        required: true
        schema:
          $ref: '#/definitions/dto.CreateComment'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Create comment
      tags:
      - Comments
  /api/v1/comments/{id}:
    delete:
      description: Delete comment by ID
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "418":
          description: I'm a teapot
      summary: Delete comment
      tags:
      - Comments
    get:
      description: Get list comments by bench
      parameters:
      - description: Bench ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Comment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: List comments by bench
      tags:
      - Comments
  /api/v1/reports/comments:
    get:
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.CommentReport'
            type: array
        "418":
          description: I'm a teapot
      summary: List moderation report comments
      tags:
      - Reports
    post:
      parameters:
      - description: report comment data
        in: body
        name: CreateComment
        required: true
        schema:
          $ref: '#/definitions/dto.CreateReportComment'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
      summary: Create report comment
      tags:
      - Reports
  /api/v1/tags:
    get:
      description: Get list tags
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Tag'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: List tags
      tags:
      - Tags
    post:
      description: Create tag
      parameters:
      - description: tag data
        in: body
        name: CreateTag
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTag'
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Create tag
      tags:
      - Tags
  /api/v1/users:
    get:
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "418":
          description: I'm a teapot
      summary: Get all users
      tags:
      - Users
    post:
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: User registration
      tags:
      - Users
  /api/v1/users/me:
    get:
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "418":
          description: I'm a teapot
      summary: Get Me
      tags:
      - Users
  /api/v1/users/refresh:
    post:
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: token info
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: User refresh token
      tags:
      - Users
swagger: "2.0"
